Problem 19
var strResult = '<br />The # of Sundays that were the 1st are: ';
var daysInMonth = [0,31,0,31,30,31,30,31,31,30,31,30,31];
function daysInFeb(year) {
    if (year % 4 != 0) return 28;
    if (year % 100 == 0 && year % 400 != 0) return 28;
    return 29;
}
//we are going to calc by days - since Jan 1, 1900 is 1, then every divisble 7 is a Sunday, and if we take
//1 and add 31, that would be feb 1st, and add 28 to that and that would be Mar 1, and so on...
function calcSundays() {
    var Day = 1;
    var totSunday = 0;
    for (var month = 0; ++month < 13;) {
        //we are doing 1900 first, since there are no checks for Sundays (1901+)
        Day += (month == 2) ? daysInFeb(1900) : daysInMonth[month];
    }
    for (var year = 1900; ++year < 2001;) {    //at this point we are at Jan 1, 1901
        for (month = 0; ++month < 13;) {
            if (Day % 7 == 0) totSunday++;
            Day += (month == 2) ? daysInFeb(year) : daysInMonth[month];
        }
    }
    return totSunday;
}

strResult += calcSundays(); 
Problem 29 
var main = function() {

    var arr = [];

    for (var a = 2; a <= 100; a++) {
        for (var b = 2; b <= 100; b++) {
            arr.push(BigInt(Math.pow(a, b)));
        }
    }
    //arr.sort((a, b) => a - b);

    return arr.filter(function(elem, pos) {
        return arr.indexOf(elem) == pos;
    }).length;
}

console.log(main());

Problem 39
var perimeterCombinationCounts = [];

for(a = 1; a < 999; a++){
    for(b = a; b < (999-a); b++){
        var c = Math.sqrt(a*a + b*b);
        if(c%1 == 0){
            var perimeter = a + b + c;
            if(perimeter <= 1000){
                perimeterCombinationCounts[perimeter] = (perimeterCombinationCounts[perimeter] || 0) + 1;
            }
        }
    }
}

var maxCombinations = 0;
var maxCombinationsPerimeter = 0;

for(var perimeter = 0; perimeter <= 1000; perimeter++){
    var combinations = perimeterCombinationCounts[perimeter];
    if(combinations && combinations > maxCombinations){
        console.log('perimeter: ' + perimeter + '  combinations: ' + combinations);
        maxCombinations = combinations;
        maxCombinationsPerimeter = perimeter;
    }        
}
        
console.log(maxCombinationsPerimeter);


Problem 9
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

a2 + b2 = c2
For example, 32 + 42 = 9 + 16 = 25 = 52.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
var a = 1;
var b = 2;
var c = Math.sqrt(a*a + b*b);
var sum = a+b+c;
while(sum != 1000){
    if(sum > 1000){
        a++;
        b = a+1;
    } else {
        b++;
    }
    c = Math.sqrt(a*a + b*b);
    sum = a + b + c;
}

console.log('a:' + a + '  b:' + b + '  c:' + c);
console.log(a*b*c);

Problem 79
A common security method used for online banking is to ask the user for three random characters from a passcode. For example, if the passcode was 531278, they may ask for the 2nd, 3rd, and 5th characters; the expected reply would be: 317.

The text file, keylog.txt, contains fifty successful login attempts.

Given that the three characters are always asked for in order, analyse the file so as to determine the shortest possible secret passcode of unknown length.

function main(data) {
    var log = String(data).split('\n', 50);
    var ans = "";
    for (;;) {
        var head = [];
        var body = [];
        for (var i in log) {
            var n = log[i][0];
            head[n] = 1;
            for (var j = 1; j < log[i].length; j++) {
                var n = log[i][j];
                body[n] = 1;
            }
        }
        var h = "";
        for (var i in head) {
            if (head[i] && !body[i]) {
                h = i;
                break;
            }
        }
        if (h == "") {
            console.log("ans:", ans);
            return 0;
        }
        ans += h;
        var log2 = [];
        for (var i in log) {
            if (log[i][0] == h) {
                log[i] = log[i].slice(1);
            }
            if (log[i] != "") {
                log2.push(log[i]);
            }
        }
        log = log2;
    }
};

var http = require('http');
var url = {
    host: 'projecteuler.net',
    path: '/project/keylog.txt'
};

http.get(url, function(res) {
    var data = '';
    res.setEncoding('utf8');
    res.on('data', function(chunk) {
        data += chunk;
    });
    res.on('end', function() {
        main(data);
    });
});
